25c25
< var r = require('rethinkdb');
---
> require_once('rdb/rdb.php');
31,34c31
< r\connect(options)
< r\connect(host)
< r\connect(options) &rarr; promise
< r\connect(host) &rarr; promise
---
> r\connect(host, port=28015[, db[, authKey[, timeout]]]) &rarr; connection
39c36
< - `host`: the host to connect to (default `localhost`).
---
> - `host`: the host to connect to.
43c40
< - `timeout`: timeout period in seconds for the connection to be opened (default `20`).
---
> - `timeout`: timeout period in seconds for after which reads from the network time out.
45c42
< If the connection cannot be established, a `RqlDriverError` will be passed to the callback instead of a connection.
---
> If the connection cannot be established, a `RqlDriverError` will be thrown.
50,54c47
< r\connect(array( 'host' => 'localhost',
<             'port' => 28015,
<             'db' => 'marvel',
<             'authKey' => 'hunter2' ),
<           function($err, $conn) { ... })
---
> $conn = r\connect('localhost', 28015)
62,63c55
< conn->close([array('noreplyWait' => true)])
< conn->close([array('noreplyWait' => true)]) &rarr; promise
---
> conn->close(noreplyWait=true)
68,69d59
< If no callback is provided, a promise will be returned.
< 
73c63
< $conn->close(function($err) { if ($err) throw $err; })
---
> $conn->close()
81,82c71
< conn->reconnect([array('noreplyWait' => true)])
< conn->reconnect([array('noreplyWait' => true)]) &rarr; promise
---
> conn->reconnect(noreplyWait=true)
87,88d75
< If no callback is provided, a promise will be returned.
< 
92c79
< $conn->reconnect(array('noreplyWait' => false), function($error, $connection) { ... })
---
> $conn->reconnect(false)
97c84
< ## [use](use/) ##
---
> ## [useDb](useDb/) ##
100c87
< conn->use(dbName)
---
> conn->useDb(dbName)
109,110c96,97
< $conn->use('marvel')
< r\table('heroes')->run($conn, ...) // refers to r.db('marvel').table('heroes')
---
> $conn->useDb('marvel')
> r\table('heroes')->run($conn) // refers to r\db('marvel').table('heroes')
116,117c103,104
< query->run(conn[, options])
< query->run(conn[, options]) &rarr; promise
---
> query->run(conn[, options]) &rarr; cursor
> query->run(conn[, options]) &rarr; datum
122,123c109
< The callback will get either an error, a single JSON result, or a
< cursor, depending on the query.
---
> Returns either a single result or a cursor, depending on the query.
129c115,116
< r\table('marvel')->run($conn, function($err, $cursor) { $cursor->each($console->$log); })
---
> $cursor = r\table('marvel')->run($conn)
> foreach ($cursor as $x) { print_r($x); }
138d124
< conn->noreplyWait() &rarr; promise
148c134
< $conn->noreplyWait(function($err) { ... })
---
> $conn->noreplyWait()
155,198d140
< ## [next](next/) ##
< 
< {% apibody %}
< cursor->next()
< array->next()
< cursor->next() &rarr; promise
< array->next() &rarr; promise
< {% endapibody %}
< 
< Get the next element in the cursor.
< 
< __Example:__ Retrieve the next element.
< 
< ```php
< $cursor->next(function($err, $row) {
<     if ($err) throw $err;
<     processRow($row);
< });
< ```
< 
< [Read more about this command &rarr;](next/)
< 
< 
< ## [each](each/) ##
< 
< {% apibody %}
< cursor->each([, onFinishedCallback])
< array->each([, onFinishedCallback])
< feed->each()
< {% endapibody %}
< 
< Lazily iterate over the result set one element at a time.
< 
< __Example:__ Let's process all the elements!
< 
< ```php
< $cursor->each(function($err, $row) {
<     if ($err) throw $err;
<     processRow($row);
< });
< ```
< 
< [Read more about this command &rarr;](each/)
< 
202,205c144
< cursor->toArray()
< array->toArray()
< cursor->toArray() &rarr; promise
< array->toArray() &rarr; promise
---
> cursor->toArray() &rarr; array
208c147
< Retrieve all results and pass them as an array to the given callback.
---
> Retrieve all results and return them as an array.
214,217c153
< $cursor->toArray(function($err, $results) {
<     if ($err) throw $err;
<     processResults($results);
< });
---
> $fullResult = $cursor->toArray()
240,256d175
< ## [EventEmitter](event_emitter-cursor/) ##
< 
< {% apibody %}
< cursor->addListener(event, listener)
< cursor->on(event, listener)
< cursor->once(event, listener)
< cursor->removeListener(event, listener)
< cursor->removeAllListeners([event])
< cursor->setMaxListeners(n)
< cursor->listeners(event)
< cursor->emit(event, [arg1], [arg2], [...])
< {% endapibody %}
< 
< Cursors and feeds implement the same interface as Node's [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter).
< 
< [Read more about this command &rarr;](event_emitter-cursor/)
< 
428c347,349
< table->indexStatus([, index...]) &rarr; array
---
> table->indexStatus() &rarr; array
> table->indexStatus(index) &rarr; array
> table->indexStatus(array(index, ...)) &rarr; array
449c370,372
< table->indexWait([, index...]) &rarr; array
---
> table->indexWait() &rarr; array
> table->indexWait(index) &rarr; array
> table->indexWait(array(index, ...)) &rarr; array
494c417
< table->insert(json | [json][, array('durability' => "hard", 'return_changes' => false, 'conflict' => "error")]) &rarr; object
---
> table->insert(json | array(json, ...)[, array('durability' => "hard", 'return_changes' => false, 'conflict' => "error")]) &rarr; object
672c595,596
< table->getAll(key[, key2...], [, array('index' =>'id')]) &rarr; selection
---
> table->getAll(key[, array('index' =>'id')]) &rarr; selection
> table->getMultiple(array(key, ...)[, array('index' =>'id')]) &rarr; selection
675a600
> Use `getMultiple` for retrieving documents under multiple keys at once.
775c700
<     return marvelRow('strength')->lt(dcRow('strength'))
---
>     return $marvelRow('strength')->lt(dcRow('strength'));
824,827c749,754
< sequence1->map([sequence2, ...], mappingFunction) &rarr; stream
< array1->map([sequence2, ...], mappingFunction) &rarr; array
< r\map(sequence1[, sequence2, ...], mappingFunction) &rarr; stream
< r\map(array1[, array2, ...], mappingFunction) &rarr; array
---
> sequence->map(mappingFunction) &rarr; stream
> array->map(mappingFunction) &rarr; array
> sequence1->mapMultiple(array(sequence2, ...), mappingFunction) &rarr; stream
> array1->mapMultiple(array(array2, ...), mappingFunction) &rarr; array
> r\mapMultiple(array(sequence1, sequence2, ...), mappingFunction) &rarr; stream
> r\mapMultiple(array(array1, array2, ...), mappingFunction) &rarr; array
830c757
< Transform each element of one or more sequences by applying a mapping function to them. If `map` is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.
---
> Transform each element of one or more sequences by applying a mapping function to them. For mapping over multiple sequences, `mapMultiple` must be used. `mapMultiple` will iterate for as many items as there are in the shortest sequence.
835c762
< r\expr(array(1, 2, 3, 4, 5))->map(function ($val) {
---
> $result = r\expr(array(1, 2, 3, 4, 5))->map(function ($val) {
838c765
< // Result passed to callback
---
> // Result
847,848c774,775
< sequence->withFields([selector1, selector2...]) &rarr; stream
< array->withFields([selector1, selector2...]) &rarr; array
---
> sequence->withFields(selector | array(selector1, selector2...)) &rarr; stream
> array->withFields(selector | array(selector1, selector2...)) &rarr; array
856c783
< r\table('users')->withFields('id', 'username', 'posts')->run($conn)
---
> r\table('users')->withFields(array('id', 'username', 'posts'))->run($conn)
874c801
<     return hero('defeatedMonsters')
---
>     return $hero('defeatedMonsters');
883,885c810,812
< table->orderBy([key1...], array('index' => index_name)) &rarr; selection<stream>
< selection->orderBy(key1, [key2...]) &rarr; selection<array>
< sequence->orderBy(key1, [key2...]) &rarr; array
---
> table->orderBy(key2 | array(key2, ...), array('index' => index_name)) &rarr; selection<stream>
> selection->orderBy(key | array(key1, ,,,)) &rarr; selection<array>
> sequence->orderBy(key | array(key1, ...)) &rarr; array
1017,1018c944,945
< stream->union(sequence[, sequence, ...]) &rarr; stream
< array->union(sequence[, sequence, ...]) &rarr; array
---
> stream->union(sequence) &rarr; stream
> array->union(sequence) &rarr; array
1021c948
< Concatenate two or more sequences.
---
> Concatenate two sequences.
1057c984
< sequence->group(fieldOrFunction..., [array('index' => "indexName", 'multi' => false)]) &rarr; grouped_stream
---
> sequence->group(fieldOrFunction[, array('index' => "indexName", 'multi' => false)]) &rarr; grouped_stream
1091c1018
<     ->group('player')->max('points')array('points')
---
>     ->group('player')->max('points')
1113c1040
<     return 1
---
>     return 1;
1115c1042
<     return $left->add($right)
---
>     return $left->add($right);
1240c1167
<     return hero('villainList')
---
>     return $hero('villainList');
1250c1177
< sequence->contains(value1[, value2...]) &rarr; bool
---
> sequence->contains(value | function) &rarr; bool
1253,1255c1180,1182
< Returns whether or not a sequence contains all the specified values, or if functions are
< provided instead, returns whether or not a sequence contains values matching all the
< specified functions.
---
> Returns whether or not a sequence contains the specified value, or if functions are
> provided instead, returns whether or not a sequence contains values matching the
> specified function.
1275c1202
< r\row &rarr; value
---
> r\row([field]) &rarr; value
1292,1295c1219,1222
< sequence->pluck([selector1, selector2...]) &rarr; stream
< array->pluck([selector1, selector2...]) &rarr; array
< object->pluck([selector1, selector2...]) &rarr; object
< singleSelection->pluck([selector1, selector2...]) &rarr; object
---
> sequence->pluck(selector | array(selector1, selector2...)) &rarr; stream
> array->pluck(selector | array(selector1, selector2...)) &rarr; array
> object->pluck(selector | array(selector1, selector2...)) &rarr; object
> singleSelection->pluck(selector | array(selector1, selector2...)) &rarr; object
1305c1232
< r\table('marvel')->get('IronMan')->pluck('reactorState', 'reactorPower')->run($conn)
---
> r\table('marvel')->get('IronMan')->pluck(array('reactorState', 'reactorPower'))->run($conn)
1313,1316c1240,1243
< sequence->without([selector1, selector2...]) &rarr; stream
< array->without([selector1, selector2...]) &rarr; array
< singleSelection->without([selector1, selector2...]) &rarr; object
< object->without([selector1, selector2...]) &rarr; object
---
> sequence->without(selector | array(selector1, selector2...)) &rarr; stream
> array->without(selector | array(selector1, selector2...)) &rarr; array
> singleSelection->without(selector | array(selector1, selector2...)) &rarr; object
> object->without(selector | array(selector1, selector2...)) &rarr; object
1473c1400,1401
< r\table('marvel')->get('IronMan')->getField('firstAppearance')->run($conn)
---
> $ironMan = r\table('marvel')->get('IronMan');
> $ironMan('firstAppearance')->run($conn)
1481,1483c1409,1411
< sequence(attr) &rarr; sequence
< singleSelection(attr) &rarr; value
< object(attr) &rarr; value
---
> sequence->getField(attr) &rarr; sequence
> singleSelection->getField(attr) &rarr; value
> object->getField(attr) &rarr; value
1499,1501c1427,1429
< sequence->hasFields([selector1, selector2...]) &rarr; stream
< array->hasFields([selector1, selector2...]) &rarr; array
< object->hasFields([selector1, selector2...]) &rarr; boolean
---
> sequence->hasFields(selector | array(selector1, selector2...)) &rarr; stream
> array->hasFields(selector | array(selector1, selector2...)) &rarr; array
> object->hasFields(selector | array(selector1, selector2...)) &rarr; boolean
1609c1537
< r\object([key, value,]...) &rarr; object
---
> r\object(array(key, value,...)) &rarr; object
1613c1541
< be strings.  `r.object(A, B, C, D)` is equivalent to
---
> be strings.  `r.object(array(A, B, C, D))` is equivalent to
1619c1547
< r\object('id', 5, 'data', array('foo', 'bar'))->run($conn)
---
> r\object(r.array('id', 5, 'data', array('foo', 'bar')))->run($conn)
1647c1575
<     return doc('name')->match("^A")
---
>     return $doc('name')->match("^A");
1801c1729
< ## [and](and/) ##
---
> ## [rAnd](rAnd/) ##
1804,1805c1732,1733
< bool->and(bool[, bool, ...]) &rarr; bool
< r\and(bool[, bool, ...]) &rarr; bool
---
> bool->rAnd(bool) &rarr; bool
> r\rAnd(bool) &rarr; bool
1808c1736
< Compute the logical "and" of two or more values.
---
> Compute the logical "and" of two values.
1814c1742
< r\expr($a)->and($b)->run($conn);
---
> r\expr($a)->rAnd($b)->run($conn);
1819c1747
< ## [or](or/) ##
---
> ## [rOr](rOr/) ##
1822,1823c1750,1751
< bool->or(bool[, bool, ...]) &rarr; bool
< r\or(bool[, bool, ...]) &rarr; bool
---
> bool->rOr(bool) &rarr; bool
> r\rOr(bool) &rarr; bool
1827c1755
< Compute the logical "or" of two or more values.
---
> Compute the logical "or" of two values.
1833c1761
< r\expr($a)->or($b)->run($conn);
---
> r\expr($a)->rOr($b)->run($conn);
2309,2328d2236
< ## [args](args/) ##
< 
< {% apibody %}
< r\args(array) &rarr; special
< {% endapibody %}
< 
< `r.args` is a special term that's used to splice an array of arguments
< into another term.  This is useful when you want to call a variadic
< term such as `getAll` with a set of arguments produced at runtime.
< 
< This is analogous to using **apply** in JavaScript.
< 
< __Example:__ Get Alice and Bob from the table `people`.
< 
< ```php
< r\table('people')->getAll('Alice', 'Bob')->run($conn)
< // or
< r\table('people')->getAll(r\args(array('Alice', 'Bob')))->run($conn)
< ```
< 
2340,2350c2248,2251
< var $fs = require('fs');
< $fs->readFile('./defaultAvatar.png', function ($err, $avatarImage) {
<     if ($err) array(
<         // Handle error
<     )
<     else array(
<         r\table('users')->get(100)->update(array(
<             'avatar' => $avatarImage
<         ))
<     )
< });
---
> $avatarImage = file_get_contents('./defaultAvatar.png');
> r\table('users')->get(100)->update(array(
>     'avatar' => r\binary($avatarImage)
> ))->run($conn)
2355c2256
< ## [do](do/) ##
---
> ## [rDo](rDo/) ##
2358,2361c2259,2262
< any->do(function) &rarr; any
< r\do([args]*, function) &rarr; any
< any->do(expr) &rarr; any
< r\do([args]*, expr) &rarr; any
---
> any->rDo(function) &rarr; any
> r\rDo(arg | array(arg,...), function) &rarr; any
> any->rDo(expr) &rarr; any
> r\rDo(arg | array(arg,...), expr) &rarr; any
2369c2270
< r\table('players')->get('f19b5f16-ef14-468f-bd48-e194761df255')->do(
---
> r\table('players')->get('f19b5f16-ef14-468f-bd48-e194761df255')->rDo(
2371c2272
<         return player('gross_score')->sub(player('course_handicap'));
---
>         return $player('gross_score')->sub($player('course_handicap'));
2402c2303
< ## [forEach](for_each/) ##
---
> ## [rForeach](rForeach/) ##
2405c2306
< sequence->forEach(write_query) &rarr; object
---
> sequence->rForeach(write_query) &rarr; object
2413,2414c2314,2315
< r\table('marvel')->forEach(function($hero) {
<     return r\table('villains')->get(hero('villainDefeated'))->delete()
---
> r\table('marvel')->rForeach(function($hero) {
>     return r\table('villains')->get($hero('villainDefeated'))->delete()
2448c2349
<     return r\branch(ironman('victories')->lt(ironman('battles')),
---
>     return r\branch($ironman('victories')->lt($ironman('battles')),
2476,2477c2377,2378
<         'title' => post("title"),
<         'author' => post("author")->default("Anonymous")
---
>         'title' => $post("title"),
>         'author' => $post("author")->default("Anonymous")
2495c2396
< r\expr(array('a' =>'b'))->merge(array('b' =>array(1,2,3)))->run($conn)
---
> r\expr(array('a' => 'b'))->merge(array('b' => array(1,2,3)))->run($conn)
2581c2482
< ## [toJsonString, toJSON](to_json_string/) ##
---
> ## [toJsonString](to_json_string/) ##
2585d2485
< value->toJSON() &rarr; string
2588c2488
< Convert a ReQL value or object to a JSON string. You may use either `toJsonString` or `toJSON`.
---
> Convert a ReQL value or object to a JSON string.
2593,2594c2493,2494
< > r\table('hero')->get(1)->toJson()
< // result returned to callback
---
> > r\table('hero')->get(1)->toJsonString()
> // result
2626c2526
< // result returned to callback
---
> // result
2637c2537
< r\circle([longitude, latitude], radius[, array('num_vertices' => 32, 'geo_system' => 'WGS84', 'unit' => 'm', 'fill' => true)]) &rarr; geometry
---
> r\circle(array(longitude, latitude), radius[, array('num_vertices' => 32, 'geo_system' => 'WGS84', 'unit' => 'm', 'fill' => true)]) &rarr; geometry
2669c2569
< // result returned to callback 
---
> // result
2688c2588
<     'rectangle' => r\line(
---
>     'rectangle' => r\line(array(
2693c2593
<     )
---
>     ))
2743c2643
< // result passed to callback
---
> // result
2763c2663
< var $circle1 = r\circle(array(-117.220406,32.719464), 10, array('unit' => 'mi'));
---
> $circle1 = r\circle(array(-117.220406,32.719464), 10, array('unit' => 'mi'));
2780c2680
< var $secretBase = r\point(-122.422876,37.777128);
---
> $secretBase = r\point(-122.422876,37.777128);
2803c2703
< // result returned to callback 
---
> // result
2824c2724
< // result returned to callback 
---
> // result
2833,2834c2733,2734
< r\line([lon1, lat1], [lon2, lat1], ...) &rarr; line
< r\line(point1, point2, ...) &rarr; line
---
> r\line(array(array(lon1, lat1), array(lon2, lat2), ...)) &rarr; line
> r\line(array(point1, point2, ...)) &rarr; line
2847c2747
<     'route' => r\line(array(-122.423246,37.779388), array(-121.886420,37.329898))
---
>     'route' => r\line(array(array(-122.423246,37.779388), array(-121.886420,37.329898)))
2876,2877c2776,2777
< r\polygon([lon1, lat1], [lon2, lat2], ...) &rarr; polygon
< r\polygon(point1, point2, ...) &rarr; polygon
---
> r\polygon(array(array(lon1, lat1), array(lon2, lat2), ...)) &rarr; polygon
> r\polygon(array(point1, point2, ...)) &rarr; polygon
2890c2790
<     'rectangle' => r\polygon(
---
>     'rectangle' => r\polygon(array(
2895c2795
<     )
---
>     ))
2913c2813
< var $outerPolygon = r\polygon(
---
> var $outerPolygon = r\polygon(array(
2918,2919c2818,2819
< );
< var $innerPolygon = r\polygon(
---
> ));
> var $innerPolygon = r\polygon(array(
2924c2824
< );
---
> ));
